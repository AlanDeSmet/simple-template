#! /usr/bin/perl -w
use strict;

use File::Basename;
use File::Spec;
use FindBin;
use lib "$FindBin::Bin/lib";
use Text::Template;

my $extension = '.src';

my $template_file = 'html.template';
my $src_file = 'index.html.src';

my $dst_dir = 'output';

my $template = Text::Template->new(TYPE=>'FILE', SOURCE=>$template_file);

exit main();

sub main {
	transform_file($src_file, $template);
}

my $package_count;
BEGIN {
	$package_count = 0;
};

sub transform_file
{
	my($src_file, $template) = @_;
	my($src_basename) = my_basename($src_file);

	my $extension_re = quotemeta($extension);
	my($dst_basename) = ($src_basename =~ /^(.+)$extension_re$/);
	if(not defined $dst_basename) {
		die "ERROR: $src_file didn't end with $extension\n";
	}

	my $dst_file = "$dst_dir/$dst_basename";

	my $contents = slurp_or_die($src_file, 'template');
	my $data = extract_data($contents) || "";

	$package_count++;
	my $package_name = "TEMP$package_count";

	my $src = "package $package_name; no strict; do \"$src_file\";";
	my $success = eval($src);
	if(not defined $success and $@ ne '') {
		die "ERROR: failed to read $src_file: $@\n";
	};

	{
		no strict 'refs';
		${$package_name.'::DATA'} = $data;
		${$package_name.'::SRC_FILE'} = $src_file;
		${$package_name.'::DST_FILE'} = $dst_file;
		${$package_name.'::BASENAME'} = $dst_basename;
	}

	my $text = $template->fill_in(PACKAGE=>$package_name);
	open my $out, '>', $dst_file
		or die "ERROR: Unable to open $dst_file for writing: $!\n";
	print $out $text;
	close $out;
}

sub slurp_or_die {
	my($file, $desc) = @_;
	open my $IN, '<', $file or die "ERROR: Unable to read $desc file $file: $!\n";
	local $/;
	my $ret = <$IN>;
	close $IN;
	return $ret;
}

sub extract_data {
	my($src) = @_;
	my($data) = ($src =~ /[\n\r]+__DATA__[\n\r]+(.*)/s);
	return $data;
}

sub my_basename {
	my($path) = @_;
	my($volume, $directory, $basename) = File::Spec->splitpath($path);
	return $basename;
}
